public class Monitor {
	private boolean onA, onB;
	private int passAB, passBA, passMax;

	public Monitor(int passMax) {
		onA = true;
		System.out.println("Train on A");
		onB = false;
		passAB = passBA = 0;
		this.passMax = passMax;
	}

	public synchronized void leaveA() {
		onA = false;
		System.out.println("\t\t\t\tTrain travelling A ->B (Monitor.leaveA())");
	}

	public synchronized void arriveB() {
		System.out.println("\t\t\t\tTrain arrive B (Monitor.arriveB())");
		onB = true;
		notifyAll();
	}

	public synchronized void leaveB() {
		onB = false;
		System.out.println("\t\t\t\tTrain travelling B -> A (Monitor.leaveB())");
	}

	public synchronized void arriveA() {
		System.out.println("\t\t\t\tTrain arrive A (Monitor.arriveA())");
		onA = true;
		notifyAll();
	}

	public synchronized void taketA() {
		while (!onA || ((passAB + passBA) >= passMax)) {
			System.out.println("\t\t" + Thread.currentThread().getName() + " waiting train (Monitor.taketA())");
			try {
				wait();
			} catch (InterruptedException e) {
				System.err.println(e);
			}
		}
		System.out.print(Thread.currentThread().getName() + " get the train; (Monitor.taketA())");
		passAB++;
		if (passAB + passBA >= passMax)
			System.out.print(" train is full");
		System.out.println("\t" + passAB + " passengers in the train traveling A-> B (Monitor.taketA())");
	}

	public synchronized void taketB() {
		while (!onB || ((passAB + passBA) >= passMax)) {
			System.out.println("\t\t" + Thread.currentThread().getName() + " waiting train (Monitor.taketB())");
			try {
				wait();
			} catch (InterruptedException e) {
				System.err.println(e);
			}
		}
		System.out.print(Thread.currentThread().getName() + " get the train (Monitor.taketB();");
		passBA++;
		if (passAB + passBA >= passMax)
			System.out.print(" train is full");
		System.out.println("\t" + passBA + " passengers in the train traveling B-> A (Monitor.taketB()");
	}

	public synchronized void leavetA() {
		while (!onA) {
			// System.out.println("\t"+Thread.currentThread().getName()+"
			// traveling in the train");
			try {
				wait();
			} catch (InterruptedException e) {
				System.err.println(e);
			}
		}
		System.out.print(Thread.currentThread().getName() + " leaving the train and going home; (Monitor.leavetA()");
		if (passBA > 0)
			passBA--;
		System.out.println("\t" + passBA + " passengers B-> A still in the train");
		notifyAll();
	}

	public synchronized void leavetB() {
		while (!onB) {
			// System.out.println(Thread.currentThread().getName()+" traveling
			// in the train");
			try {
				wait();
			} catch (InterruptedException e) {
				System.err.println(e);
			}
		}
		System.out.print(Thread.currentThread().getName() + " leaving the train and going home; (Monitor.leavetB())");
		if (passAB > 0)
			passAB--;
		System.out.println("\t" + passAB + " passengers  A-> B still in the train");
		notifyAll();
	}
}